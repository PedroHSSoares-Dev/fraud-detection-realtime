"""
generate_data.py - Gerador de dados sint√©ticos para detec√ß√£o de fraude
Fraud Detection Project - Fase 2

Este script √© o cora√ß√£o do projeto. Ele cria:
1. 300K transa√ß√µes (99.8% normais, 0.2% fraude)
   - 100K para treino
   - 200K para teste
   - Decis√£o: Gerar apenas o necess√°rio (pragmatismo > volume)
2. 2K transa√ß√µes fraudulentas de 5 tipos diferentes em 3 n√≠veis de dificuldade

Por que 300K e n√£o 1M?
- Efici√™ncia: Gera√ß√£o mais r√°pida (~1.5min vs ~5min)
- Deploy: Cabe confortavelmente na t2.micro (1GB RAM)
- Foco: O valor est√° na qualidade das fraudes, n√£o no volume
"""

import pandas as pd
import numpy as np
from faker import Faker
from datetime import datetime, timedelta
from typing import List, Tuple
import sys
import os

# Adicionar o diret√≥rio raiz ao path para imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from user_profile import UserProfile


class FraudDataGenerator:
    """
    Gerador de dataset sint√©tico para detec√ß√£o de fraude em tempo real.
    
    Esta classe implementa a gera√ß√£o de transa√ß√µes realistas e a inje√ß√£o
    controlada de fraudes em m√∫ltiplos n√≠veis de dificuldade.
    """
    
    def __init__(
        self,
        n_transactions: int = 1_000_000,
        n_users: int = 50_000,
        fraud_ratio: float = 0.002,
        start_date: str = '2024-01-01',
        end_date: str = '2024-12-31',
        random_seed: int = 42
    ):
        """
        Inicializa o gerador de dados.
        
        Args:
            n_transactions: N√∫mero total de transa√ß√µes (normal + fraude)
            n_users: N√∫mero de usu√°rios √∫nicos
            fraud_ratio: Propor√ß√£o de fraudes (0.002 = 0.2%)
            start_date: Data inicial do per√≠odo
            end_date: Data final do per√≠odo
            random_seed: Seed para reprodutibilidade
        """
        # Configura√ß√£o
        np.random.seed(random_seed)
        Faker.seed(random_seed)
        
        self.faker = Faker('pt_BR')
        self.n_transactions = n_transactions
        self.n_users = n_users
        self.fraud_ratio = fraud_ratio
        self.n_frauds = int(n_transactions * fraud_ratio)
        self.n_normal = n_transactions - self.n_frauds
        
        # Datas
        self.start_date = datetime.strptime(start_date, '%Y-%m-%d')
        self.end_date = datetime.strptime(end_date, '%Y-%m-%d')
        self.date_range_days = (self.end_date - self.start_date).days
        
        print(f"üìä Configura√ß√£o do Gerador:")
        print(f"  - Total de transa√ß√µes: {n_transactions:,}")
        print(f"  - Transa√ß√µes normais: {self.n_normal:,} (99.8%)")
        print(f"  - Transa√ß√µes fraudulentas: {self.n_frauds:,} (0.2%)")
        print(f"  - Usu√°rios √∫nicos: {n_users:,}")
        print(f"  - Per√≠odo: {start_date} a {end_date}")
        
        # Criar perfis de usu√°rios (PR√â-PROCESSAMENTO)
        print(f"\nüë• Criando perfis de {n_users:,} usu√°rios...")
        self.users = self._create_user_profiles()
        print(f"‚úì Perfis criados com sucesso!")
        
        # Dataframe que ser√° preenchido
        self.df = None
        
    def _create_user_profiles(self) -> List[UserProfile]:
        """
        Cria perfis de usu√°rio com caracter√≠sticas consistentes.
        
        Returns:
            Lista de objetos UserProfile
        """
        users = []
        for user_id in range(self.n_users):
            users.append(UserProfile(user_id, self.faker))
            
            # Progress bar a cada 10k usu√°rios
            if (user_id + 1) % 5000 == 0:
                print(f"  - Criados {user_id + 1:,}/{self.n_users:,} perfis...")
        
        return users
    
    def generate_normal_transactions(self) -> pd.DataFrame:
        """
        Gera transa√ß√µes normais com padr√µes humanos realistas.
        
        L√ìGICA:
        1. Para cada transa√ß√£o, sorteia um usu√°rio (com replacement)
        2. Usa o perfil do usu√°rio para gerar valores realistas
        3. 95% das transa√ß√µes s√£o perto de casa, 5% em viagem
        
        Returns:
            DataFrame com transa√ß√µes normais
        """
        print(f"\nüí≥ Gerando {self.n_normal:,} transa√ß√µes normais...")
        
        transactions = []
        
        for i in range(self.n_normal):
            # Sortear usu√°rio (distribui√ß√£o uniforme)
            user = np.random.choice(self.users)
            
            # Gerar timestamp aleat√≥rio no per√≠odo
            random_days = np.random.randint(0, self.date_range_days)
            transaction_date = self.start_date + timedelta(days=random_days)
            
            # Adicionar hora do dia (baseado no perfil do usu√°rio)
            hour = user.sample_transaction_hour()
            minute = np.random.randint(0, 60)
            second = np.random.randint(0, 60)
            
            timestamp = transaction_date.replace(hour=hour, minute=minute, second=second)
            
            # Valor da transa√ß√£o (baseado no perfil)
            amount = user.sample_transaction_amount()
            
            # Categoria do merchant (baseado nas prefer√™ncias)
            merchant_category = user.sample_merchant_category()
            
            # Localiza√ß√£o (95% perto de casa, 5% em viagem)
            if np.random.rand() < 0.95:
                lat, lon, city, country = user.sample_location(distance_from_home_km=0)
            else:
                # Viagem (dist√¢ncia aleat√≥ria)
                lat, lon, city, country = user.sample_location(distance_from_home_km=np.random.uniform(100, 5000))
            
            # Merchant name (fake)
            merchant_name = self.faker.company()
            
            # Card last 4 digits (usu√°rio pode ter 1-3 cart√µes)
            n_cards = np.random.randint(1, 4)
            card_last4 = str(np.random.randint(1000, 9999))
            
            transaction = {
                'transaction_id': f'TX{i:010d}',
                'user_id': f'USER{user.user_id:06d}',
                'timestamp': timestamp,
                'amount': round(amount, 2),
                'merchant_name': merchant_name,
                'merchant_category': merchant_category,
                'latitude': round(lat, 6),
                'longitude': round(lon, 6),
                'city': city,
                'country': country,
                'card_last4': card_last4,
                'is_fraud': 0,
                'fraud_type': None,
                'fraud_difficulty': None
            }
            
            transactions.append(transaction)
            
            # Progress bar a cada 100k transa√ß√µes
            if (i + 1) % 10000 == 0:
                print(f"  - Geradas {i + 1:,}/{self.n_normal:,} transa√ß√µes...")
        
        df = pd.DataFrame(transactions)
        
        # Ordenar por timestamp (para facilitar inje√ß√£o de fraudes temporais)
        df = df.sort_values('timestamp').reset_index(drop=True)
        
        print(f"‚úì Transa√ß√µes normais geradas com sucesso!")
        print(f"  - Per√≠odo: {df['timestamp'].min()} a {df['timestamp'].max()}")
        print(f"  - Valor m√©dio: R$ {df['amount'].mean():.2f}")
        print(f"  - Valor total: R$ {df['amount'].sum():,.2f}")
        
        return df
    
    def save_data(self, output_path: str = '../../data/raw/transactions.csv'):
        """
        Salva o dataset final em CSV.
        
        Args:
            output_path: Caminho para salvar o CSV
        """
        if self.df is None:
            raise ValueError("Nenhum dado para salvar. Execute generate_normal_transactions() primeiro.")
        
        # Criar diret√≥rio se n√£o existir
        os.makedirs(os.path.dirname(output_path), exist_ok=True)
        
        # Salvar CSV
        self.df.to_csv(output_path, index=False)
        
        print(f"\nüíæ Dataset salvo em: {output_path}")
        print(f"  - Total de linhas: {len(self.df):,}")
        print(f"  - Tamanho do arquivo: {os.path.getsize(output_path) / 1024 / 1024:.2f} MB")
        
        # Salvar gabarito separado (apenas fraudes)
        fraud_df = self.df[self.df['is_fraud'] == 1].copy()
        if len(fraud_df) > 0:
            gabarito_path = output_path.replace('.csv', '_gabarito.csv')
            fraud_df.to_csv(gabarito_path, index=False)
            print(f"  - Gabarito salvo em: {gabarito_path}")
            print(f"    - Total de fraudes: {len(fraud_df):,}")


# ==============================================================================
# FUN√á√ïES DE INJE√á√ÉO DE FRAUDE (Ser√£o implementadas na pr√≥xima parte)
# ==============================================================================

def inject_teleport_fraud(df: pd.DataFrame, n_samples: int, difficulty: str) -> pd.DataFrame:
    """
    Injeta fraude do tipo TELEPORTE GEOGR√ÅFICO.
    
    L√ìGICA:
    - Pegar transa√ß√µes de um usu√°rio
    - Encontrar a pr√≥xima transa√ß√£o daquele usu√°rio
    - Mudar a localiza√ß√£o para um pa√≠s/cidade diferente
    - Manter o intervalo de tempo curto (<10min para dif√≠cil, <1h para m√©dio, <5h para f√°cil)
    
    Args:
        df: DataFrame com transa√ß√µes
        n_samples: Quantidade de fraudes a injetar
        difficulty: 'easy', 'medium', 'hard'
    
    Returns:
        DataFrame com fraudes injetadas
    """
    print(f"\nüåç Injetando {n_samples} fraudes de TELEPORTE ({difficulty})...")
    # Implementa√ß√£o na pr√≥xima parte
    return df


def inject_sudden_spending_fraud(df: pd.DataFrame, n_samples: int, difficulty: str) -> pd.DataFrame:
    """
    Injeta fraude do tipo GASTO S√öBITO.
    
    L√ìGICA:
    - Calcular m√©dia de gasto do usu√°rio nos √∫ltimos 30 dias
    - Criar transa√ß√£o com valor muito acima da m√©dia
    - F√°cil: 100x maior | M√©dio: 10x maior | Dif√≠cil: 3x maior
    """
    print(f"\nüí∏ Injetando {n_samples} fraudes de GASTO S√öBITO ({difficulty})...")
    # Implementa√ß√£o na pr√≥xima parte
    return df


def inject_card_testing_fraud(df: pd.DataFrame, n_samples: int, difficulty: str) -> pd.DataFrame:
    """
    Injeta fraude do tipo SONDAGEM DE CART√ÉO.
    
    L√ìGICA:
    - Criar m√∫ltiplas transa√ß√µes pequenas (R$ 1-10) em poucos segundos
    - Simula fraudador testando se cart√£o roubado funciona
    """
    print(f"\nüîç Injetando {n_samples} fraudes de SONDAGEM ({difficulty})...")
    # Implementa√ß√£o na pr√≥xima parte
    return df


def inject_unusual_time_fraud(df: pd.DataFrame, n_samples: int, difficulty: str) -> pd.DataFrame:
    """
    Injeta fraude do tipo HOR√ÅRIO AT√çPICO.
    
    L√ìGICA:
    - Usu√°rio faz transa√ß√£o em hor√°rio incomum (madrugada)
    - Em categoria que n√£o costuma usar
    """
    print(f"\nüåô Injetando {n_samples} fraudes de HOR√ÅRIO AT√çPICO ({difficulty})...")
    # Implementa√ß√£o na pr√≥xima parte
    return df


def inject_risky_merchant_fraud(df: pd.DataFrame, n_samples: int, difficulty: str) -> pd.DataFrame:
    """
    Injeta fraude do tipo MERCHANT SUSPEITO.
    
    L√ìGICA:
    - Transa√ß√£o em categoria de alto risco (cassino, cripto, forex)
    - Valor alto
    - Localiza√ß√£o internacional
    """
    print(f"\nüé∞ Injetando {n_samples} fraudes de MERCHANT SUSPEITO ({difficulty})...")
    # Implementa√ß√£o na pr√≥xima parte
    return df


# ==============================================================================
# SCRIPT PRINCIPAL
# ==============================================================================

if __name__ == '__main__':
    print("=" * 80)
    print("GERADOR DE DADOS SINT√âTICOS - FRAUD DETECTION")
    print("=" * 80)
    
    # Inicializar gerador
    # 300K transa√ß√µes: 100K treino + 200K teste (exatamente o que precisamos!)
    # 15K usu√°rios: propor√ß√£o realista de ~20 transa√ß√µes/usu√°rio
    generator = FraudDataGenerator(
        n_transactions=300_000,
        n_users=15_000,
        fraud_ratio=0.002,
        start_date='2024-01-01',
        end_date='2024-12-31',
        random_seed=42
    )
    
    # Gerar transa√ß√µes normais
    generator.df = generator.generate_normal_transactions()
    
    # Salvar dados
    generator.save_data()
    
    print("\n" + "=" * 80)
    print("‚úì GERA√á√ÉO DE DADOS CONCLU√çDA COM SUCESSO!")
    print("=" * 80)